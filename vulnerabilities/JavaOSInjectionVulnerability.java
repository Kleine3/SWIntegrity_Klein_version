/**
 * Java OS Injection Vulnerability class
 *
 * @author Kristelle Lucero
 */

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class JavaOSInjectionVulnerability implements Vulnerability {

	/*
	* This method analyzes the code for the possibility of Operating System Injection
	*/
	public List<Integer> run(Analyzer ana){
		JavaAnalyzer javaAn = (JavaAnalyzer) ana;

		String osImports[] = {"java.lang", "java.io"}; //these packages are the most likely to call OS commands
		String osCommands[] = {"runtime.getruntime"}; //these commands are commonly exploited
		String osWhiteList[] = {}; //if the code contains a white list of acceptable characters then it is at less risk of OS injection
		String osBlackList[] = {"|",":",";","$","<",">","`","\\","/","!","{","}","(",")","[","]","&","*","+","=","?","-","#","~",".","\"","%"}; 
		//^^^these are unsafe characters. Check to see if program uses a blacklist

		String contents = "";
		String currentLine = "";
		ArrayList<Integer> vulnLines = new ArrayList<>(); //a list of line numbers that the vulnerability was found on
		
		try {
				BufferedReader br = new BufferedReader(new FileReader(fileName));

				while ((currentLine = br.readLine()) != null) {
					contents += currentLine;
					contents = contents.toLowerCase();
				}

				//check to see if the program uses common packages that utilize OS commands

				//check to see if the program either utilizes a white list
				//or if the program sanitizes the input
				//if there's no whitelist and there's no input sanitization
				//mark the lines where OS command is called

				
			} catch (IOException e) {
				System.out.println("FileNotFoundException in "
						+ "Java OS analyze");
			}
		return vulnLines;
	}
}