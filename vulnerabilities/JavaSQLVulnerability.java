import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;



/**
 * @author Ed Klein
 * @author Kristelle Lucero
 * @author Sean Lawton
 *
 */
public class JavaSQLVulnerability {

	/**
	 * @param fileName the string of an analyzed file.
	 * @return  a boolean to see if this vulnerability exists
	 * by checking it against different conditions
	 * 
	 * checks the two java library api imports see if being used
	 * if no then skips all analysis to return false no vulnerabilities
	 * then iterates through a list of sql keywords to see if they exist.
	 */
	public static boolean analyze(String fileName) {
		
		String DBkeywords[] = {"SELECT", "UNION", "WHERE", "FROM", "HAVING", "JOIN", "ORDER BY"}; //A List of key words used in SQL
		String contents = "";
		String currentLine = "";
		boolean badSQL = false; 
		
		try{
			BufferedReader br = new BufferedReader(new FileReader(fileName));
		
			while((currentLine = br.readLine()) != null){
				contents += currentLine;
			}
			
			if(contents.contains("java/.sql") || contents.contains("jdbc")){
				contents = contents.toUpperCase();
				for(String word : DBkeywords){
					if(contents.contains(word)){
						if(contents.contains("1=1") || contents.contains("%00") || contents.contains("'")){
							badSQL = true;									    
						}													  
					} 													     
				}
			} 
		}
		catch (IOException e){
			System.out.println("FileNotFoundException in "
					+ "Java SQL analyze");
		}
	
		return badSQL;
	}	
}
