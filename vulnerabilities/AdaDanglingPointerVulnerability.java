import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;



public class AdaDanglingPointerVulnerability implements Vulnerability {
	public List<Integer> run(Analyzer ana) {
		AdaAnalyzer aana = (AdaAnalyzer) ana;
		ArrayList<Integer> lineNumbers = new ArrayList<>();
		//case 1: access type variables that have not been freed still point to another access type variable that was freed
		String fileArray[] = aana.getFileContents().split(" ");
		Pattern alphaUnderscore = Pattern.compile("[a-zA-Z_]+");
		ArrayList<String> methodList = new ArrayList<>();
		HashSet<String> dangerousVariables = new HashSet<>();
		HashMap<AdaAnalyzer.Variable, Integer> danglers = new HashMap<>();
		for (int i = 0; i <= fileArray.length - 7; i++) {
			if (fileArray[i].equals("procedure") && fileArray[i + 2].equals("is") && fileArray[i + 3].equals("new") && fileArray[i + 4].equals("Ada") && fileArray[i + 5].equals(".") && fileArray[i + 6].equals("Unchecked_Deallocation")) {
				methodList.add(fileArray[i + 1]);
			}
		}
		for (int i = 0; i <= fileArray.length - 4; i++) {
			if (methodList.contains(fileArray[i]) && fileArray[i + 1].equals("(") && fileArray[i + 3].equals(")")) {
				dangerousVariables.add(fileArray[i + 2]);
			}
		}

		String str = "";
		for (AdaAnalyzer.Variable va : aana.getVariables().values()) {
			Map<Integer, String> as = va.getAssignments();
			int len = as.keySet().size();
			for (Integer key : as.keySet()) {
				Matcher mm = alphaUnderscore.matcher(as.get(key));
				if (mm.find()) {
					str = mm.group();
				}
				if (dangerousVariables.contains(str)) { //if var := myFunction is called, and myFunction returns an access type, this won't catch it
					danglers.put(va, key);
				}
			}
		}

		//case 2: access type variable is assigned to a local variable that has become out of scope
		int accessScope = 0;
		int localVariableScope = 0;
		Pattern numeric = Pattern.compile("[0-9]{1,}");
		Matcher mt;
		for (AdaAnalyzer.Variable v : aana.getVariables().values()) {
			if (aana.getAccessTypes().contains(v.getType())) { //the variable is an access type
				mt = numeric.matcher(v.getScope());
				while (mt.find()) {
					if (mt.hitEnd()) {
						accessScope = Integer.parseInt(mt.group());
					}
				}
				Matcher mm;
				for (Integer key : v.getAssignments().keySet()) {
					mm = alphaUnderscore.matcher(v.getAssignments().get(key));
					if (mm.find()) {
						str = mm.group();
					}
					if (aana.getVariables().keySet().contains(str)) { //the assignment is another variable and not a number
						AdaAnalyzer.Variable myLocalVariable = aana.getVariables().get(str);
						mt = numeric.matcher(myLocalVariable.getScope());
						while (mt.find()) {
							if (mt.hitEnd()) {
								localVariableScope = Integer.parseInt(mt.group());
							}
						}
						String lineString = "";
						if (localVariableScope > accessScope) {
							mt = numeric.matcher(v.getAssignments().get(key));
							if (mt.find()) {
								lineString = mt.group();
							}
							danglers.put(v, Integer.parseInt(lineString));
						}
					}
				}
			}
		}
		for (AdaAnalyzer.Variable vari : danglers.keySet()) {
			lineNumbers.add(danglers.get(vari));
		}
		return lineNumbers;
	}
}