import java.util.LinkedList;
import java.util.List;
import java.util.Map;


public class CppDanglingPointerVulnerability implements Vulnerability {

	public List<Integer> run(Analyzer ana) {
		CppAnalyzer cppana=(CppAnalyzer)ana;
		String[] words = cppana.getFileContents().split(" ");
		List<Integer> danglingPointerList = new LinkedList<>();
		for(CppAnalyzer.Pointer p: cppana.getPointersList())
		{
			for(Integer deletion: p.getDeletions())
			{
				int i = deletion+1;
				boolean isDP = false;
				while(i<words.length)
				{
					if (words[i].equals("}"))
					{
						isDP = true;
						break;
					}
					if(words[i].equals(p.getName())&&words[i+1].equals("=")&&!words[i+2].equals("=")) {
						break;
					}
					else if (words[i].equals(p.getName())) {
						isDP=true;
						break;
					}
					i++;
				}
				if(isDP)
				{
					danglingPointerList.add(cppana.getSymbolToLine().get(deletion));
				}
			}
			for(Map.Entry<Integer, String> entry:p.getAssignments().entrySet()) 
			{
				if(!entry.getValue().equals("")) {
					String[] assignment=entry.getValue().split(" ");
					String first=assignment[0];
					String last=assignment[assignment.length-1];
					if(first.equals("new")||first.equals("&"));
					else if(last.equals(")")) {
						danglingPointerList.add(cppana.getSymbolToLine().get(entry.getKey()));
					}
						
				}
				
			}
			
		}
		System.out.println(danglingPointerList);
		return danglingPointerList;
	}

}
